import React, { useState, useMemo } from 'react'
import { motion } from 'framer-motion'
import { useParams, useNavigate } from 'react-router-dom'
import {
    FileText,
    FileSpreadsheet,
    Presentation,
    File,
    Music,
    Image,
    ArrowLeft,
    Search,
    Download,
    Eye,
    Trash2,
    SortAsc,
    SortDesc,
    Filter
} from 'lucide-react'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import {
    DropdownMenu,
    DropdownMenuContent,
    DropdownMenuItem,
    DropdownMenuTrigger,
    DropdownMenuSeparator,
    DropdownMenuLabel,
    DropdownMenuPortal
} from "@/components/ui/dropdown-menu"

const FileView = () => {
    const { category } = useParams()
    const navigate = useNavigate()
    const [searchQuery, setSearchQuery] = useState('')
    const [sortBy, setSortBy] = useState('date')
    const [sortOrder, setSortOrder] = useState('desc')
    const [filterBy, setFilterBy] = useState('all')

    // Mock data for chat-related files
    const allFiles = [
        // Documents
        { name: 'Project_Report.docx', size: '2.4 MB', date: '2024-01-15', type: 'Word Document', chat: 'Research Discussion #1', user: 'Uploaded by user', category: 'docs' },
        { name: 'Financial_Data.xlsx', size: '1.8 MB', date: '2024-01-14', type: 'Excel Spreadsheet', chat: 'Budget Analysis', user: 'Generated by AI', category: 'docs' },
        { name: 'Presentation.pptx', size: '5.2 MB', date: '2024-01-13', type: 'PowerPoint', chat: 'Team Meeting', user: 'Uploaded by user', category: 'docs' },
        { name: 'Notes.txt', size: '45 KB', date: '2024-01-12', type: 'Text File', chat: 'Quick Notes', user: 'Generated by AI', category: 'docs' },
        { name: 'Contract.pdf', size: '892 KB', date: '2024-01-11', type: 'PDF Document', chat: 'Legal Review', user: 'Uploaded by user', category: 'docs' },

        // Audio Files
        { name: 'Meeting_Recording.mp3', size: '24.5 MB', date: '2024-01-15', type: 'MP3 Audio', chat: 'Voice Discussion', user: 'Recorded in chat', category: 'audio' },
        { name: 'Interview.wav', size: '156 MB', date: '2024-01-14', type: 'WAV Audio', chat: 'Technical Interview', user: 'Generated by AI', category: 'audio' },
        { name: 'Podcast_Episode.mp3', size: '18.3 MB', date: '2024-01-13', type: 'MP3 Audio', chat: 'Audio Summary', user: 'Generated by AI', category: 'audio' },

        // Images
        { name: 'Screenshot_001.png', size: '1.2 MB', date: '2024-01-15', type: 'PNG Image', chat: 'Bug Report', user: 'Uploaded by user', category: 'images' },
        { name: 'Product_Photo.jpg', size: '3.8 MB', date: '2024-01-14', type: 'JPEG Image', chat: 'Product Demo', user: 'Generated by AI', category: 'images' },
        { name: 'Logo_Design.webp', size: '245 KB', date: '2024-01-13', type: 'WebP Image', chat: 'Design Review', user: 'Uploaded by user', category: 'images' },
        { name: 'Diagram.svg', size: '89 KB', date: '2024-01-12', type: 'SVG Image', chat: 'System Architecture', user: 'Generated by AI', category: 'images' },
        { name: 'Banner.gif', size: '567 KB', date: '2024-01-11', type: 'GIF Image', chat: 'Animation Demo', user: 'Generated by AI', category: 'images' }
    ]

    // Get category info
    const getCategoryInfo = (cat) => {
        switch (cat) {
            case 'docs':
                return {
                    title: 'Documents',
                    description: 'All documents from your conversations',
                    icon: FileText,
                    color: 'text-blue-400'
                }
            case 'audio':
                return {
                    title: 'Audio Files',
                    description: 'All audio recordings from your conversations',
                    icon: Music,
                    color: 'text-purple-400'
                }
            case 'images':
                return {
                    title: 'Images',
                    description: 'All images from your conversations',
                    icon: Image,
                    color: 'text-cyan-400'
                }
            default:
                return {
                    title: 'Files',
                    description: 'All files from your conversations',
                    icon: File,
                    color: 'text-gray-400'
                }
        }
    }

    const categoryInfo = getCategoryInfo(category)

    // Sorting and filtering functions
    const sortFiles = (files) => {
        return [...files].sort((a, b) => {
            let comparison = 0

            switch (sortBy) {
                case 'name':
                    comparison = a.name.localeCompare(b.name)
                    break
                case 'date':
                    comparison = new Date(a.date) - new Date(b.date)
                    break
                case 'size':
                    // Simple size comparison (convert to numbers)
                    const aSize = parseFloat(a.size.replace(/[^\d.]/g, ''))
                    const bSize = parseFloat(b.size.replace(/[^\d.]/g, ''))
                    comparison = aSize - bSize
                    break
                default:
                    comparison = 0
            }

            return sortOrder === 'asc' ? comparison : -comparison
        })
    }

    const filterBySource = (files) => {
        if (filterBy === 'all') return files
        if (filterBy === 'ai') return files.filter(file => file.user.includes('AI'))
        if (filterBy === 'user') return files.filter(file => file.user.includes('user'))
        return files
    }

    // Filter files by category, search query, source, then sort
    const filteredFiles = useMemo(() => {
        let categoryFiles = allFiles.filter(file => file.category === category)

        // Apply search filter
        if (searchQuery) {
            categoryFiles = categoryFiles.filter(file =>
                file.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
                file.type.toLowerCase().includes(searchQuery.toLowerCase()) ||
                file.chat.toLowerCase().includes(searchQuery.toLowerCase()) ||
                file.user.toLowerCase().includes(searchQuery.toLowerCase())
            )
        }

        // Apply source filter
        categoryFiles = filterBySource(categoryFiles)

        // Apply sorting
        return sortFiles(categoryFiles)
    }, [category, searchQuery, allFiles, sortBy, sortOrder, filterBy])

    const getFileIcon = (fileName) => {
        const ext = fileName.split('.').pop()?.toLowerCase()
        switch (ext) {
            case 'docx':
                return <FileText className="w-5 h-5 text-blue-400" />
            case 'xlsx':
                return <FileSpreadsheet className="w-5 h-5 text-green-400" />
            case 'pptx':
                return <Presentation className="w-5 h-5 text-orange-400" />
            case 'pdf':
                return <File className="w-5 h-5 text-red-400" />
            case 'txt':
                return <FileText className="w-5 h-5 text-gray-400" />
            case 'mp3':
            case 'wav':
                return <Music className="w-5 h-5 text-purple-400" />
            case 'jpg':
            case 'jpeg':
            case 'png':
            case 'webp':
            case 'gif':
            case 'svg':
                return <Image className="w-5 h-5 text-cyan-400" />
            default:
                return <File className="w-5 h-5 text-gray-400" />
        }
    }

    const handleDeleteFile = (fileName) => {
        if (window.confirm(`Are you sure you want to delete "${fileName}"?`)) {
            console.log('Delete file:', fileName)
        }
    }

    return (
        <div className="p-6 space-y-6">
            {/* Page Header */}
            <motion.div
                initial={{ opacity: 0, y: -20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.3 }}
                className="flex items-center justify-between"
            >
                <div className="flex items-center gap-3">
                    <Button
                        variant="ghost"
                        size="sm"
                        onClick={() => navigate('/app/files')}
                        className="text-gray-400 hover:text-gray-200 p-2"
                    >
                        <ArrowLeft className="w-4 h-4" />
                    </Button>
                    <motion.div
                        whileHover={{ rotate: 180 }}
                        transition={{ duration: 0.3 }}
                    >
                        <categoryInfo.icon className={`w-6 h-6 ${categoryInfo.color}`} />
                    </motion.div>
                    <div>
                        <h1 className="text-xl font-semibold text-gray-100">{categoryInfo.title}</h1>
                        <p className="text-sm text-gray-400">{categoryInfo.description}</p>
                    </div>
                </div>

                <div className="text-right">
                    <div className="text-2xl font-bold text-blue-400">{filteredFiles.length}</div>
                    <div className="text-xs text-gray-500">files</div>
                </div>
            </motion.div>

            {/* Search and Controls */}
            <motion.div
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.3, delay: 0.1 }}
                className="flex flex-col sm:flex-row gap-4"
            >
                {/* Search Bar */}
                <div className="relative flex-1">
                    <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400" />
                    <Input
                        placeholder={`Search ${categoryInfo.title.toLowerCase()} by name, type, or chat...`}
                        value={searchQuery}
                        onChange={(e) => setSearchQuery(e.target.value)}
                        className="pl-10 bg-gray-800 border-gray-600 text-gray-100 focus:border-blue-500"
                    />
                </div>

                {/* Sort and Filter Controls */}
                <div className="flex gap-2">
                    {/* Sort Dropdown */}
                    <DropdownMenu>
                        <DropdownMenuTrigger>
                            <Button variant="outline" className="bg-gray-800 border-gray-600 text-gray-300 hover:bg-gray-700">
                                <SortAsc className="w-4 h-4 mr-2" />
                                Sort
                            </Button>
                        </DropdownMenuTrigger>
                        <DropdownMenuPortal>
                            <DropdownMenuContent className="bg-gray-800 border-gray-600 z-50">
                                <DropdownMenuLabel className="text-gray-300">Sort by</DropdownMenuLabel>
                                <DropdownMenuSeparator className="bg-gray-600" />
                                <DropdownMenuItem
                                    onClick={() => setSortBy('name')}
                                    className="text-gray-300 hover:bg-gray-700 focus:bg-gray-700"
                                >
                                    Name {sortBy === 'name' && (sortOrder === 'asc' ? '↑' : '↓')}
                                </DropdownMenuItem>
                                <DropdownMenuItem
                                    onClick={() => setSortBy('date')}
                                    className="text-gray-300 hover:bg-gray-700 focus:bg-gray-700"
                                >
                                    Date {sortBy === 'date' && (sortOrder === 'asc' ? '↑' : '↓')}
                                </DropdownMenuItem>
                                <DropdownMenuItem
                                    onClick={() => setSortBy('size')}
                                    className="text-gray-300 hover:bg-gray-700 focus:bg-gray-700"
                                >
                                    Size {sortBy === 'size' && (sortOrder === 'asc' ? '↑' : '↓')}
                                </DropdownMenuItem>
                                <DropdownMenuSeparator className="bg-gray-600" />
                                <DropdownMenuItem
                                    onClick={() => setSortOrder(sortOrder === 'asc' ? 'desc' : 'asc')}
                                    className="text-gray-300 hover:bg-gray-700 focus:bg-gray-700"
                                >
                                    {sortOrder === 'asc' ? <SortDesc className="w-4 h-4 mr-2" /> : <SortAsc className="w-4 h-4 mr-2" />}
                                    {sortOrder === 'asc' ? 'Descending' : 'Ascending'}
                                </DropdownMenuItem>
                            </DropdownMenuContent>
                        </DropdownMenuPortal>
                    </DropdownMenu>

                    {/* Filter Dropdown */}
                    <DropdownMenu>
                        <DropdownMenuTrigger>
                            <Button variant="outline" className="bg-gray-800 border-gray-600 text-gray-300 hover:bg-gray-700">
                                <Filter className="w-4 h-4 mr-2" />
                                Filter
                            </Button>
                        </DropdownMenuTrigger>
                        <DropdownMenuPortal>
                            <DropdownMenuContent className="bg-gray-800 border-gray-600 z-50">
                                <DropdownMenuLabel className="text-gray-300">Filter by source</DropdownMenuLabel>
                                <DropdownMenuSeparator className="bg-gray-600" />
                                <DropdownMenuItem
                                    onClick={() => setFilterBy('all')}
                                    className={`text-gray-300 hover:bg-gray-700 focus:bg-gray-700 ${filterBy === 'all' ? 'bg-blue-500/20 text-blue-400' : ''}`}
                                >
                                    All Files
                                </DropdownMenuItem>
                                <DropdownMenuItem
                                    onClick={() => setFilterBy('ai')}
                                    className={`text-gray-300 hover:bg-gray-700 focus:bg-gray-700 ${filterBy === 'ai' ? 'bg-blue-500/20 text-blue-400' : ''}`}
                                >
                                    Generated by AI
                                </DropdownMenuItem>
                                <DropdownMenuItem
                                    onClick={() => setFilterBy('user')}
                                    className={`text-gray-300 hover:bg-gray-700 focus:bg-gray-700 ${filterBy === 'user' ? 'bg-blue-500/20 text-blue-400' : ''}`}
                                >
                                    Uploaded by User
                                </DropdownMenuItem>
                            </DropdownMenuContent>
                        </DropdownMenuPortal>
                    </DropdownMenu>
                </div>
            </motion.div>

            {/* Files Grid */}
            {filteredFiles.length > 0 ? (
                <motion.div
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ duration: 0.3, delay: 0.2 }}
                    className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4"
                >
                    {filteredFiles.map((file, index) => (
                        <motion.div
                            key={file.name}
                            initial={{ opacity: 0, scale: 0.95 }}
                            animate={{ opacity: 1, scale: 1 }}
                            transition={{ duration: 0.2, delay: index * 0.05 }}
                            className="bg-gray-800 border border-gray-600 rounded-lg p-4 hover:bg-gray-700 transition-all duration-200 group"
                        >
                            {/* File Header */}
                            <div className="flex items-start justify-between mb-3">
                                <div className="flex items-center gap-3">
                                    {getFileIcon(file.name)}
                                    <div className="flex-1 min-w-0">
                                        <h3 className="text-sm font-medium text-gray-200 truncate">
                                            {file.name}
                                        </h3>
                                        <p className="text-xs text-gray-500">{file.type}</p>
                                        <p className="text-xs text-gray-400 mt-1">
                                            <span className="font-medium">Chat:</span> {file.chat}
                                        </p>
                                    </div>
                                </div>

                                {/* Action Buttons */}
                                <div className="opacity-0 group-hover:opacity-100 transition-opacity flex gap-1">
                                    <Button variant="ghost" size="sm" className="h-6 w-6 p-0 text-gray-400 hover:text-blue-400">
                                        <Eye className="w-3 h-3" />
                                    </Button>
                                    <Button variant="ghost" size="sm" className="h-6 w-6 p-0 text-gray-400 hover:text-green-400">
                                        <Download className="w-3 h-3" />
                                    </Button>
                                    <Button
                                        variant="ghost"
                                        size="sm"
                                        onClick={() => handleDeleteFile(file.name)}
                                        className="h-6 w-6 p-0 text-gray-400 hover:text-red-400"
                                    >
                                        <Trash2 className="w-3 h-3" />
                                    </Button>
                                </div>
                            </div>

                            {/* File Details */}
                            <div className="space-y-2 text-xs text-gray-500">
                                <div className="flex justify-between">
                                    <span>Size: {file.size}</span>
                                    <span>{file.date}</span>
                                </div>
                                <div className="flex justify-between">
                                    <span className={`px-2 py-1 rounded-full text-xs ${file.user.includes('AI') ? 'bg-blue-500/20 text-blue-400' : 'bg-green-500/20 text-green-400'
                                        }`}>
                                        {file.user}
                                    </span>
                                </div>
                            </div>
                        </motion.div>
                    ))}
                </motion.div>
            ) : (
                <motion.div
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ duration: 0.3, delay: 0.2 }}
                    className="flex items-center justify-center py-16 text-gray-500"
                >
                    <div className="text-center">
                        <categoryInfo.icon className="w-16 h-16 mx-auto mb-4 opacity-50" />
                        <h3 className="text-lg font-medium mb-2">No files found</h3>
                        <p>Try adjusting your search or check back later</p>
                        {searchQuery && (
                            <Button
                                variant="outline"
                                size="sm"
                                onClick={() => setSearchQuery('')}
                                className="mt-4"
                            >
                                Clear Search
                            </Button>
                        )}
                    </div>
                </motion.div>
            )}
        </div>
    )
}

export default FileView